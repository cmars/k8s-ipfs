apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ipfs
spec:
  serviceName: ipfs
  replicas: 1
  selector:
    matchLabels:
      app: ipfs
  template:
    metadata:
      labels:
        app: ipfs
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 100
        fsGroup: 100
      initContainers:
      - name: configure-ipfs
        image: "ipfs/go-ipfs:latest"
        imagePullPolicy: Always
        env:
        - name: IPFS_PUBLIC_HOST
          value: $(IPFS_PUBLIC_HOST)
        command: ["sh", "/custom/configure-ipfs.sh"]
        volumeMounts:
        - name: ipfs-storage
          mountPath: /data/ipfs
        - name: configure-script
          mountPath: /custom
      containers:
      - name: ipfs
        image: "ipfs/go-ipfs:latest"
        imagePullPolicy: IfNotPresent
        env:
        - name: IPFS_FD_MAX
          value: "4096"
        ports:
        - name: swarm
          protocol: TCP
          containerPort: 4001
        - name: swarm-udp
          protocol: UDP
          containerPort: 4002
        - name: api
          protocol: TCP
          containerPort: 5001
        - name: ws
          protocol: TCP
          containerPort: 8081
        - name: http
          protocol: TCP
          containerPort: 8080
        livenessProbe:
          tcpSocket:
            port: swarm
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 15
        volumeMounts:
        - name: ipfs-storage
          mountPath: /data/ipfs
        - name: configure-script
          mountPath: /custom
      volumes:
      - name: configure-script
        configMap:
          name: ipfs-set-bootstrap-conf
  volumeClaimTemplates:
  - metadata:
      name: ipfs-storage
    spec:
      storageClassName: local-path
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
